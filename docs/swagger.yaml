definitions:
  api.Container:
    properties:
      id:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      names:
        items:
          type: string
        type: array
      state:
        type: string
    type: object
  api.ContainerListResponse:
    properties:
      containers:
        items:
          $ref: '#/definitions/api.Container'
        type: array
    type: object
  api.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.GetConfigResponse:
    properties:
      tileUri:
        type: string
    type: object
  api.GetSettingsResponse:
    properties:
      settings:
        additionalProperties:
          type: string
        type: object
    type: object
  api.OkResponse:
    properties:
      ok:
        type: string
    type: object
  geometry_msgs.Point:
    properties:
      msg.Package:
        type: integer
      x:
        type: number
      "y":
        type: number
      z:
        type: number
    type: object
  geometry_msgs.Point32:
    properties:
      msg.Package:
        type: integer
      x:
        type: number
      "y":
        type: number
      z:
        type: number
    type: object
  geometry_msgs.Polygon:
    properties:
      msg.Package:
        type: integer
      points:
        items:
          $ref: '#/definitions/geometry_msgs.Point32'
        type: array
    type: object
  geometry_msgs.Pose:
    properties:
      msg.Package:
        type: integer
      orientation:
        $ref: '#/definitions/geometry_msgs.Quaternion'
      position:
        $ref: '#/definitions/geometry_msgs.Point'
    type: object
  geometry_msgs.Quaternion:
    properties:
      msg.Package:
        type: integer
      w:
        type: number
      x:
        type: number
      "y":
        type: number
      z:
        type: number
    type: object
  mower_map.AddMowingAreaSrvReq:
    properties:
      area:
        $ref: '#/definitions/mower_map.MapArea'
      isNavigationArea:
        type: boolean
      msg.Package:
        type: integer
    type: object
  mower_map.MapArea:
    properties:
      area:
        $ref: '#/definitions/geometry_msgs.Polygon'
      msg.Package:
        type: integer
      name:
        type: string
      obstacles:
        items:
          $ref: '#/definitions/geometry_msgs.Polygon'
        type: array
    type: object
  mower_map.SetDockingPointSrvReq:
    properties:
      dockingPose:
        $ref: '#/definitions/geometry_msgs.Pose'
      msg.Package:
        type: integer
    type: object
  types.FirmwareConfig:
    properties:
      batChargeCutoffVoltage:
        type: number
      boardType:
        type: string
      bothWheelsLiftEmergencyMillis:
        type: integer
      branch:
        type: string
      debugType:
        type: string
      disableEmergency:
        type: boolean
      externalImuAcceleration:
        type: boolean
      externalImuAngular:
        type: boolean
      file:
        type: string
      limitVoltage150MA:
        type: number
      masterJ18:
        type: boolean
      maxChargeCurrent:
        type: number
      maxChargeVoltage:
        type: number
      maxMps:
        type: number
      oneWheelLiftEmergencyMillis:
        type: integer
      panelType:
        type: string
      playButtonClearEmergencyMillis:
        type: integer
      repository:
        type: string
      stopButtonEmergencyMillis:
        type: integer
      tiltEmergencyMillis:
        type: integer
      version:
        type: string
    type: object
info:
  contact: {}
paths:
  /config/envs:
    get:
      description: get config env from backend
      produces:
      - application/json
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GetConfigResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: get config env from backend
      tags:
      - config
  /config/keys/get:
    post:
      description: get config from backend
      parameters:
      - description: settings
        in: body
        name: settings
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: get config from backend
      tags:
      - config
  /config/keys/set:
    post:
      description: set config to backend
      parameters:
      - description: settings
        in: body
        name: settings
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: set config to backend
      tags:
      - config
  /containers:
    get:
      description: list all containers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.ContainerListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: list all containers
      tags:
      - containers
  /containers/{containerId}/{command}:
    post:
      description: execute a command on a container
      parameters:
      - description: container id
        in: path
        name: containerId
        required: true
        type: string
      - description: command to execute (start/stop/restart)
        in: path
        name: command
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: execute a command on a container
      tags:
      - containers
  /containers/{containerId}/logs:
    get:
      description: get container logs
      parameters:
      - description: container id
        in: path
        name: containerId
        required: true
        type: string
      produces:
      - text/event-stream
      responses: {}
      summary: get container logs
      tags:
      - containers
  /openmower/call/{command}:
    post:
      consumes:
      - application/json
      description: call a service
      parameters:
      - description: 'command to call, could be: mower_start, mower_home, mower_s1,
          mower_s2, emergency, mow'
        in: path
        name: command
        required: true
        type: string
      - description: request body
        in: body
        name: CallReq
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: call a service
      tags:
      - openmower
  /openmower/map:
    delete:
      consumes:
      - application/json
      description: clear the map
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: clear the map
      tags:
      - openmower
  /openmower/map/area/add:
    post:
      consumes:
      - application/json
      description: add a map area
      parameters:
      - description: request body
        in: body
        name: CallReq
        required: true
        schema:
          $ref: '#/definitions/mower_map.AddMowingAreaSrvReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: add a map area
      tags:
      - openmower
  /openmower/map/docking:
    post:
      consumes:
      - application/json
      description: set the docking point
      parameters:
      - description: request body
        in: body
        name: CallReq
        required: true
        schema:
          $ref: '#/definitions/mower_map.SetDockingPointSrvReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: set the docking point
      tags:
      - openmower
  /openmower/publish/{topic}:
    get:
      description: publish to a topic
      parameters:
      - description: 'topic to publish to, could be: joy'
        in: path
        name: topic
        required: true
        type: string
      responses: {}
      summary: publish to a topic
      tags:
      - openmower
  /openmower/subscribe/{topic}:
    get:
      description: subscribe to a topic
      parameters:
      - description: 'topic to subscribe to, could be: diagnostics, status, gps, imu,
          ticks, highLevelStatus'
        in: path
        name: topic
        required: true
        type: string
      responses: {}
      summary: subscribe to a topic
      tags:
      - openmower
  /settings:
    get:
      description: returns a JSON object with the settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.GetSettingsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: returns a JSON object with the settings
      tags:
      - settings
    post:
      consumes:
      - application/json
      description: saves the settings to the mower_config.sh file
      parameters:
      - description: settings
        in: body
        name: settings
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: saves the settings to the mower_config.sh file
      tags:
      - settings
  /setup/flashBoard:
    post:
      consumes:
      - application/json
      description: flash the mower board with the given config
      parameters:
      - description: config
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/types.FirmwareConfig'
      produces:
      - text/event-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: flash the mower board with the given config
      tags:
      - setup
  /setup/flashGPS:
    post:
      consumes:
      - application/json
      description: flash the gps configuration
      produces:
      - text/event-stream
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.OkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: flash the gps configuration
      tags:
      - setup
swagger: "2.0"
