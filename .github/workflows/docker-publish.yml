name: Build

on:
  workflow_dispatch:
  push:
    branches: [ "bun" ]
  pull_request:
    branches: [ "bun" ]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  VERSION: test
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        arch: [ linux/arm64 , linux/amd64 ]
        include:
          - arch: linux/arm64
            builder: buildjet-4vcpu-ubuntu-2204-arm
          - arch: linux/amd64
            builder: buildjet-4vcpu-ubuntu-2204
    name: Build - ${{matrix.arch}}
    runs-on: ${{matrix.builder}}

    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate dynamic tags
        id: vars
        run: |
          VERSION="${{ env.VERSION }}"
          DATE=$(date +%y%m%d)
          echo "TAG_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG_DATE=${VERSION}${DATE}" >> $GITHUB_OUTPUT
          echo "TAG_CUSTOM=bun" >> $GITHUB_OUTPUT

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_VERSION }}
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_DATE }}
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_CUSTOM }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          platforms: ${{ matrix.arch }}
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_VERSION }}
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_DATE }}
            ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_CUSTOM }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_IMAGE }}:master
          cache-to: type=inline

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build-and-push.outputs.digest }}"
          echo "$digest" > "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.ARTIFACT_NAME }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-*
          merge-multiple: true
          path: /tmp/digests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            $(printf "${{ env.REGISTRY_IMAGE }}@sha256:%s " *) \
            --tag ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_VERSION }} \
            --tag ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_DATE }} \
            --tag ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_CUSTOM }}

      - name: Inspect image
        run: docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.vars.outputs.TAG_CUSTOM }}
